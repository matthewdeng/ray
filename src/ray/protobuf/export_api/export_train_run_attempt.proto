// Copyright 2024 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option cc_enable_arenas = true;

package ray.rpc;

import "google/protobuf/timestamp.proto";

// Metadata for an individual attempt to execute a Train run
message ExportTrainRunAttempt {
  // Enumeration of the possible statuses for a Train run attempt
  enum RunAttemptStatus {
    // Default value required by proto3
    UNSPECIFIED = 0;

    // Active States
    PENDING = 1;
    RUNNING = 2;

    // Terminal States
    FINISHED = 3;
    ERRORED = 4;
    ABORTED = 5;
  }

  // Enumeration of the statuses for a Train worker actor
  enum ActorStatus {
    // Default value required by proto3
    UNSPECIFIED = 0;

    // The actor is currently active
    ALIVE = 1;
    // The actor is no longer active
    DEAD = 2;
  }

  // Resources allocated for a Train worker or run
  message TrainResources {
    // A dictionary specifying the types and amounts of resources allocated (e.g., CPU, GPU)
    map<string, double> resources = 1;
  }

  // Metadata about a Ray Train worker
  message TrainWorker {
    // The global rank of the worker in the training cluster
    int32 world_rank = 1;
    // The local rank of the worker on its node
    int32 local_rank = 2;
    // The rank of the worker's node in the cluster
    int32 node_rank = 3;
    // The unique ID of the worker's actor
    string actor_id = 4;
    // The unique ID of the node where the worker is running
    string node_id = 5;
    // The IP address of the node where the worker is running
    string node_ip = 6;
    // The process ID of the worker
    int32 pid = 7;
    // A list of GPU IDs allocated to the worker
    repeated int32 gpu_ids = 8;
    // The current status of the worker actor
    optional ActorStatus status = 9;
    // The resources allocated to this Train worker
    TrainResources resources = 10;
  }

  // Unique identifier for the parent Train run
  string run_id = 1;
  // Unique identifier for this specific Train run attempt
  string attempt_id = 2;
  // The current execution status of the Train run attempt
  RunAttemptStatus status = 3;
  // Additional details about the status, including error messages if applicable
  optional string status_detail = 4;
  // The timestamp when the Train run attempt started
  google.protobuf.Timestamp start_time = 5;
  // The timestamp when the Train run attempt ended. If null, the attempt is still ongoing
  optional google.protobuf.Timestamp end_time = 6;
  // The resources (e.g., CPU, GPU) allocated to the Train run attempt
  repeated TrainResources resources = 7;
  // List of Train workers participating in this attempt, sorted by global ranks
  repeated TrainWorker workers = 8;
}
